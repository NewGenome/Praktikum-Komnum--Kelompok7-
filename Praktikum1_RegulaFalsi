import matplotlib.pyplot as plt
import numpy as np
from sympy import symbols, lambdify, sympify

def regula_falsi(f_expr, a, b, tol=1e-6, max_iter=100):
    x = symbols('x')
    f = lambdify(x, sympify(f_expr), 'numpy')

    if f(a) * f(b) >= 0:
        print("Error: f(x0) dan f(x1) tidak memiliki tanda yang berbeda.")
        return None

    print(f"{'Iterasi':<5}{'Xn-1':>7}{'Yn':>10}{'f(Xn)':>12}{'Error (%)':>16}")
    c_old = None

    for i in range(1, max_iter + 1):
        fa = f(a)
        fb = f(b)
        c = b - fb * (b - a) / (fb - fa)
        fc = f(c)

        error = abs((c - c_old) / c) * 100 if c_old is not None else None
        error_str = f"{error:.6f}" if error is not None else "---"
        print(f"{i:<5}{a:>10.6f}{c:>12.6f}{fc:>12.6f}{error_str:>12}")

        if abs(fc) < tol or (error is not None and error < tol * 100):
            print(f"\nAkar - Akar ditemukan ketika x = {c:.6f} setelah melalui {i} iterasi.")
            return c

        if fa * fc < 0:
            b = c
        else:
            a = c

        c_old = c

    print("\nTidak terjadi konvergen setelah mencapai jumlah iterasi maksimum.")
    return None

def plot_function(f_expr, root=None, a=None, b=None):
    x = symbols('x')
    f = lambdify(x, sympify(f_expr), 'numpy')
    x_vals = np.linspace(a - 1, b + 1, 500)
    y_vals = f(x_vals)

    plt.figure(figsize=(8, 5))
    plt.plot(x_vals, y_vals, label=f"f(x) = {f_expr}")
    plt.axhline(0, color='black', linewidth=0.8)
    if root is not None:
        plt.axvline(root, color='red', linestyle='--', label=f"Akar-Akar â‰ˆ {root:.6f}")
        plt.plot(root, f(root), 'ro')
    plt.grid(True)
    plt.title("Grafik Metode Regula Falsi")
    plt.xlabel("x")
    plt.ylabel("f(x)")
    plt.legend()
    plt.show()


if __name__ == "__main__":
    print("=== Metode Regula Falsi ===")
    print("Note : Masukkan fungsi dalam bentuk ekspresi Python, misalnya x**3 - x - 2")
    f_expr = input("Masukkan Fungsi f(x): ")
    a = float(input("Masukkan Tebakan pertama (x0) : "))
    b = float(input("Masukkan Tebakan Kedua (x1): "))
    tol = input("Masukkan Derajat Toleransi (default = 1e-6): ")
    tol = float(tol) if tol else 1e-6
    max_iter = input("Masukkan  Maksimal iterasi (default = 100): ")
    max_iter = int(max_iter) if max_iter else 100

    root = regula_falsi(f_expr, a, b, tol, max_iter)
    if root is not None:
        plot_function(f_expr, root=root, a=a, b=b)
